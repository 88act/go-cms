// Code generated by goctl. DO NOT EDIT!
// Source: order.proto

package order

import (
	"context"

	"looklook/app/order/cmd/rpc/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AddOrderReq           = pb.AddOrderReq
	AddOrderResp          = pb.AddOrderResp
	OrderDetailReq        = pb.OrderDetailReq
	OrderDetailResp       = pb.OrderDetailResp
	OrderInfo             = pb.OrderInfo
	OrderListReq          = pb.OrderListReq
	OrderListResp         = pb.OrderListResp
	UpdateOrderReq        = pb.UpdateOrderReq
	UpdateOrderResp       = pb.UpdateOrderResp
	UpdateOrderStatusReq  = pb.UpdateOrderStatusReq
	UpdateOrderStatusResp = pb.UpdateOrderStatusResp
	UpdatePayStatusReq    = pb.UpdatePayStatusReq
	UpdatePayStatusResp   = pb.UpdatePayStatusResp

	Order interface {
		// 下订单
		AddOrder(ctx context.Context, in *AddOrderReq, opts ...grpc.CallOption) (*AddOrderResp, error)
		// 订单详情
		OrderDetail(ctx context.Context, in *OrderDetailReq, opts ...grpc.CallOption) (*OrderDetailResp, error)
		// 更新订单
		UpdateOrder(ctx context.Context, in *UpdateOrderReq, opts ...grpc.CallOption) (*UpdateOrderResp, error)
		// 更新支付状态
		UpdatePayStatus(ctx context.Context, in *UpdatePayStatusReq, opts ...grpc.CallOption) (*UpdatePayStatusResp, error)
		// 更新订单状态
		UpdateOrderStatus(ctx context.Context, in *UpdateOrderStatusReq, opts ...grpc.CallOption) (*UpdateOrderStatusResp, error)
		// 订单列表
		OrderList(ctx context.Context, in *OrderListReq, opts ...grpc.CallOption) (*OrderListResp, error)
	}

	defaultOrder struct {
		cli zrpc.Client
	}
)

func NewOrder(cli zrpc.Client) Order {
	return &defaultOrder{
		cli: cli,
	}
}

// 下订单
func (m *defaultOrder) AddOrder(ctx context.Context, in *AddOrderReq, opts ...grpc.CallOption) (*AddOrderResp, error) {
	client := pb.NewOrderClient(m.cli.Conn())
	return client.AddOrder(ctx, in, opts...)
}

// 订单详情
func (m *defaultOrder) OrderDetail(ctx context.Context, in *OrderDetailReq, opts ...grpc.CallOption) (*OrderDetailResp, error) {
	client := pb.NewOrderClient(m.cli.Conn())
	return client.OrderDetail(ctx, in, opts...)
}

// 更新订单
func (m *defaultOrder) UpdateOrder(ctx context.Context, in *UpdateOrderReq, opts ...grpc.CallOption) (*UpdateOrderResp, error) {
	client := pb.NewOrderClient(m.cli.Conn())
	return client.UpdateOrder(ctx, in, opts...)
}

// 更新支付状态
func (m *defaultOrder) UpdatePayStatus(ctx context.Context, in *UpdatePayStatusReq, opts ...grpc.CallOption) (*UpdatePayStatusResp, error) {
	client := pb.NewOrderClient(m.cli.Conn())
	return client.UpdatePayStatus(ctx, in, opts...)
}

// 更新订单状态
func (m *defaultOrder) UpdateOrderStatus(ctx context.Context, in *UpdateOrderStatusReq, opts ...grpc.CallOption) (*UpdateOrderStatusResp, error) {
	client := pb.NewOrderClient(m.cli.Conn())
	return client.UpdateOrderStatus(ctx, in, opts...)
}

// 订单列表
func (m *defaultOrder) OrderList(ctx context.Context, in *OrderListReq, opts ...grpc.CallOption) (*OrderListResp, error) {
	client := pb.NewOrderClient(m.cli.Conn())
	return client.OrderList(ctx, in, opts...)
}
