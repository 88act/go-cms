// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: act.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ActClient is the client API for Act service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ActClient interface {
	//actDetail
	ActDetail(ctx context.Context, in *ActDetailReq, opts ...grpc.CallOption) (*ActDetailResp, error)
	//actList
	ActList(ctx context.Context, in *ActListReq, opts ...grpc.CallOption) (*ActListResp, error)
}

type actClient struct {
	cc grpc.ClientConnInterface
}

func NewActClient(cc grpc.ClientConnInterface) ActClient {
	return &actClient{cc}
}

func (c *actClient) ActDetail(ctx context.Context, in *ActDetailReq, opts ...grpc.CallOption) (*ActDetailResp, error) {
	out := new(ActDetailResp)
	err := c.cc.Invoke(ctx, "/pb.act/actDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actClient) ActList(ctx context.Context, in *ActListReq, opts ...grpc.CallOption) (*ActListResp, error) {
	out := new(ActListResp)
	err := c.cc.Invoke(ctx, "/pb.act/actList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ActServer is the server API for Act service.
// All implementations must embed UnimplementedActServer
// for forward compatibility
type ActServer interface {
	//actDetail
	ActDetail(context.Context, *ActDetailReq) (*ActDetailResp, error)
	//actList
	ActList(context.Context, *ActListReq) (*ActListResp, error)
	mustEmbedUnimplementedActServer()
}

// UnimplementedActServer must be embedded to have forward compatible implementations.
type UnimplementedActServer struct {
}

func (UnimplementedActServer) ActDetail(context.Context, *ActDetailReq) (*ActDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActDetail not implemented")
}
func (UnimplementedActServer) ActList(context.Context, *ActListReq) (*ActListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActList not implemented")
}
func (UnimplementedActServer) mustEmbedUnimplementedActServer() {}

// UnsafeActServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ActServer will
// result in compilation errors.
type UnsafeActServer interface {
	mustEmbedUnimplementedActServer()
}

func RegisterActServer(s grpc.ServiceRegistrar, srv ActServer) {
	s.RegisterService(&Act_ServiceDesc, srv)
}

func _Act_ActDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActServer).ActDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.act/actDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActServer).ActDetail(ctx, req.(*ActDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Act_ActList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActServer).ActList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.act/actList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActServer).ActList(ctx, req.(*ActListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Act_ServiceDesc is the grpc.ServiceDesc for Act service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Act_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.act",
	HandlerType: (*ActServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "actDetail",
			Handler:    _Act_ActDetail_Handler,
		},
		{
			MethodName: "actList",
			Handler:    _Act_ActList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "act.proto",
}
